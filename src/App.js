import React from "react";
import { useState, useEffect } from "react";
import styled from "styled-components";

function Calculator() {
  const [calc, setCalc] = useState("");
  const [operCheck, setOperCheck] = useState(true);
  const [pointCheck, setPointCheck] = useState(true);
  // Í≥ÑÏÇ∞ Í∏∞Î°ùÏùÑ Ï†ÄÏû•Ìï† state Ï∂îÍ∞Ä
  const [history, setHistory] = useState([]);
  // Í¥ÑÌò∏ ÏÉÅÌÉú Í¥ÄÎ¶¨Î•º ÏúÑÌïú state Ï∂îÍ∞Ä
  const [bracketOpen, setBracketOpen] = useState(false);

  // HistoryContainer ÌëúÏãú Ïó¨Î∂ÄÎ•º Ï†úÏñ¥ÌïòÎäî state
  const [showHistory, setShowHistory] = useState(false);

  // ÏùåÏÑ± Ïù∏ÏãùÏùÑ ÏúÑÌïú state Ï∂îÍ∞Ä
  const [isListening, setIsListening] = useState(false);

  useEffect(() => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.onstart = () => {
      setIsListening(true);
    };

    recognition.onend = () => {
      setIsListening(false);
    };

    recognition.onresult = (event) => {
      const speechToText = event.results[0][0].transcript;
      // ÏùåÏÑ± Ïù∏Ïãù Í≤∞Í≥º Ï≤òÎ¶¨
      setCalc(speechToText);
      console.log(speechToText);
    };

    // ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûë Î∞è Ï§ëÏßÄ Ìï®Ïàò
    const toggleListening = () => {
      if (isListening) {
        recognition.stop();
      } else {
        recognition.start();
      }
    };

    // ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏Ïóê Ìï®Ïàò Ïó∞Í≤∞
    const iconElement = document.getElementById("voice-icon");
    iconElement.addEventListener("click", toggleListening);

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
    return () => {
      iconElement.removeEventListener("click", toggleListening);
    };
  }, [isListening]);

  const toggleHistory = () => {
    setShowHistory(!showHistory);
  };

  const getNum = (e) => {
    setCalc((prev) => prev + e.target.value);
    setOperCheck(true);
  };

  const getOper = (e) => {
    if (operCheck) {
      setCalc((prev) => prev + e.target.value);
      setOperCheck(false);
    }
  };

  // ÏÜåÏàòÏ†êÏù¥ ÌïúÎ≤àÎßå ÎàåÎ¶¨Îäî Î¨∏Ï†ú Ìï¥Í≤∞
  // ÌòÑÏû¨ ÏûÖÎ†• Ï§ëÏù∏ Ïà´ÏûêÏùò ÎÅù Î∂ÄÎ∂ÑÏùÑ ÌôïÏù∏ÌïòÍ≥† ÎßåÏïΩ ÎßàÏßÄÎßâ ÏûÖÎ†•Ïù¥ ÏÜåÏàòÏ†êÏù¥ ÏïÑÎãàÎùºÎ©¥ ÏÉàÎ°úÏö¥ ÏÜåÏàòÏ†êÏùÑ Ï∂îÍ∞ÄÌï† Ïàò ÏûàÎèÑÎ°ù Î°úÏßÅ Î≥ÄÍ≤Ω

  const getPoint = () => {
    if (calc.length === 0) {
      setCalc("0.");
      return;
    }

    // Í∞ÄÏû• ÏµúÍ∑º Ïó∞ÏÇ∞ÏûêÏùò ÏúÑÏπòÎ•º Ï∞æÏïÑ ÌòÑÏû¨ ÏûÖÎ†• Ï§ëÏù∏ Ïà´ÏûêÎ•º ÌôïÏù∏
    const lastOperIndex = Math.max(
      calc.lastIndexOf("+"),
      calc.lastIndexOf("-"),
      calc.lastIndexOf("*"),
      calc.lastIndexOf("/"),
      calc.lastIndexOf("%")
    );
    const currentNumber = calc.substring(lastOperIndex + 1);

    // ÌòÑÏû¨ Ïà´ÏûêÏóê ÏÜåÏàòÏ†êÏù¥ ÏóÜÏúºÎ©¥ ÏÜåÏàòÏ†ê Ï∂îÍ∞Ä
    if (!currentNumber.includes(".")) {
      setCalc(calc + ".");
    }
  };

  // Í∏∞Ï°¥ ÏΩîÎìú
  // const getResult = () => {
  //   let replace_str = calc.replace(/√ó/gi, "*").replace(/√∑/gi, "/");

  //   if (isNaN(eval(replace_str))) {
  //     setCalc("");
  //   } else if (eval(replace_str) == Infinity) {
  //     alert("0ÏúºÎ°ú ÎÇòÎàåÏàò ÏóÜÏäµÎãàÎã§.");
  //     setCalc("");
  //     return false;
  //   } else {
  //     setCalc((prev) => eval(replace_str));
  //   }
  // };

  // ÏÜåÏàòÏ†ê Î¨∏Ï†ú Ìï¥Í≤∞!!
  // Î¨∏Ï†ú
  // eval Ìï®Ïàò: Î¨∏ÏûêÏó¥ÏùÑ ÏΩîÎìúÎ°ú Ïã§Ìñâ -> Î¨∏ÏûêÏó¥ ÎÇ¥ Ïà´ÏûêÍ∞Ä 0ÏúºÎ°ú ÏãúÏûëÌï† Í≤ΩÏö∞ 8ÏßÑÏàòÎ°ú Ìï¥ÏÑùÌïòÎ†§Í≥† ÏãúÎèÑ
  // Í∑∏Îü¨ÎÇò ÏûêÎ∞îÏä§ÌÅ¨Î¶ΩÌä∏Ïùò strict modeÏóêÏÑúÎäî 8ÏßÑÏàò Î¶¨ÌÑ∞Îü¥Ïù¥ ÌóàÏö©ÎêòÏßÄ ÏïäÏùå

  // Ìï¥Í≤∞
  // ÏûÖÎ†•Ìïú Í∞íÏù¥ 0ÏúºÎ°ú ÏãúÏûëÌïòÎäî Í≤ΩÏö∞ 10ÏßÑÏàòÎ°ú Î≥ÄÌôòÌïòÎäî Î°úÏßÅ Ï∂îÍ∞Ä

  const getResult = () => {
    let replace_str = calc
      .replace(/√ó/g, "*")
      .replace(/√∑/g, "/")
      .replace(/\b0+(?![.])/g, ""); // 0ÏúºÎ°ú ÏãúÏûëÌïòÎäî Ïà´ÏûêÏóêÏÑú ÏÑ†Ìñâ 0 Ï†úÍ±∞
    // 0ÏúºÎ°ú ÏãúÏûëÌïòÎäî Ïà´ÏûêÍ∞Ä 10ÏßÑÏàòÎ°ú Ï≤òÎ¶¨ÎêòÎèÑÎ°ù

    try {
      let result = Function('"use strict"; return (' + replace_str + ")")();
      if (!isNaN(result) && result !== Infinity) {
        // Í≥ÑÏÇ∞ Í≤∞Í≥º ÏóÖÎç∞Ïù¥Ìä∏ÏôÄ ÎèôÏãúÏóê Í≥ÑÏÇ∞ Í∏∞Î°ù Ï∂îÍ∞Ä
        setCalc(String(result));
        setHistory([...history, `${calc} = ${result}`]); // Í≥ÑÏÇ∞ ÏàòÏãùÍ≥º Í≤∞Í≥ºÎ•º historyÏóê Ï∂îÍ∞Ä
      }
      // ...Í∏∞Ï°¥ Ïò§Î•ò Ï≤òÎ¶¨ Î°úÏßÅ
    } catch (e) {
      alert("Í≥ÑÏÇ∞ Ïò§Î•ò: " + e.message);
      setCalc("");
    }
  };

  const delCalc = () => {
    setPointCheck(true);
    setOperCheck(true);
    let str = String(calc).slice(0, -1);
    setCalc((prev) => str);
  };

  const allClear = () => {
    setPointCheck(true);
    setCalc((prev) => "");
  };

  // Í∏∞Ï°¥Ïùò ÎßàÏö∞Ïä§ Ïò®ÌÅ¥Î¶≠ÏóêÏÑú ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏Î°ú Î∞îÍæ∏Í≥† Ïã∂ÏóàÎã§
  // ÌÇ§Î≥¥Îìú ÏûÖÎ†• Ï≤òÎ¶¨ Ìï®Ïàò
  const handleKeyPress = (event) => {
    const { key } = event;
    if (key >= "0" && key <= "9") {
      getNum({ target: { value: key } });
    } else if (["/", "*", "-", "+", "%"].includes(key)) {
      getOper({ target: { value: key } });
    } else if (key === ".") {
      getPoint({ target: { value: key } });
    } else if (key === "Enter") {
      getResult();
    } else if (key === "Backspace") {
      delCalc();
    } else if (key === "Escape") {
      allClear();
    }
  };

  const handleBracket = () => {
    if (bracketOpen) {
      setCalc((prev) => prev + ")");
      setBracketOpen(false);
    } else {
      setCalc((prev) => prev + "(");
      setBracketOpen(true);
    }
  };

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÌÇ§Î≥¥Îìú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
  useEffect(() => {
    window.addEventListener("keydown", handleKeyPress);

    // Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
    return () => {
      window.removeEventListener("keydown", handleKeyPress);
    };
  }, [calc, operCheck, pointCheck, history]);

  const handleDeleteHistory = (index) => {
    setHistory((currentHistory) =>
      currentHistory.filter((_, i) => i !== index)
    );
  };

  return (
    <MainContainer>
      <InputBar readOnly value={calc} />
      <MenuContainer>
        <Icon onClick={toggleHistory}>‚è∞</Icon>{" "}
        {/* ÏãúÍ≥Ñ ÏïÑÏù¥ÏΩò ÎåÄÏã† ÌÖçÏä§Ìä∏Î°ú ÌëúÏãú */}
        <Icon id="voice-icon">{isListening ? "üõë" : "üé§"}</Icon>
      </MenuContainer>
      <ButtonContainer>
        <Button onClick={allClear}>AC</Button>
        <Button onClick={delCalc}>DEL</Button>
        <Button onClick={handleBracket}>{bracketOpen ? ")" : "("}</Button>
        <CalButton value="%" onClick={getOper}>
          %
        </CalButton>
        <CalButton value="√∑" onClick={getOper}>
          √∑
        </CalButton>
        <Button value={7} onClick={getNum}>
          7
        </Button>
        <Button value={8} onClick={getNum}>
          8
        </Button>
        <Button value={9} onClick={getNum}>
          9
        </Button>
        <CalButton value="√ó" onClick={getOper}>
          √ó
        </CalButton>
        <Button value={4} onClick={getNum}>
          4
        </Button>
        <Button value={5} onClick={getNum}>
          5
        </Button>
        <Button value={6} onClick={getNum}>
          6
        </Button>
        <CalButton value="-" onClick={getOper}>
          -
        </CalButton>
        <Button value={1} onClick={getNum}>
          1
        </Button>
        <Button value={2} onClick={getNum}>
          2
        </Button>
        <Button value={3} onClick={getNum}>
          3
        </Button>
        <CalButton value="+" onClick={getOper}>
          +
        </CalButton>
        <ZeroButton value={0} onClick={getNum}>
          0
        </ZeroButton>
        <Button value="." onClick={getPoint}>
          .
        </Button>
        <CalButton onClick={getResult}>=</CalButton>
      </ButtonContainer>
      {showHistory && (
        <HistoryContainer>
          {history.map((record, index) => (
            <HistoryEntry key={index}>
              <HistoryItem>{record}</HistoryItem>
              <HistoryButton onClick={() => handleDeleteHistory(index)}>
                ÏÇ≠Ï†ú
              </HistoryButton>
            </HistoryEntry>
          ))}
        </HistoryContainer>
      )}
    </MainContainer>
  );
}

const MainContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
`;

const ButtonContainer = styled.div`
  display: grid;
  width: 40%;
  max-width: 450px;
  height: 50%;
  grid-template-columns: repeat(4, 1fr);
  grid-column-gap: 10px;
  grid-row-gap: 10px;
`;

const Button = styled.button`
  background-color: #f2f3f5;
  border: none;
  color: black;
  font-size: 1.5rem;
  border-radius: 35px;
  cursor: pointer;
  box-shadow: 3px 3px 3px lightgray;

  &:active {
    margin-left: 2px;
    margin-top: 2px;
    box-shadow: none;
  }
`;

const CalButton = styled(Button)`
  font-size: 2rem;
  color: white;
  background-color: #4b89dc;
`;

const ZeroButton = styled(Button)``;

const InputBar = styled.input`
  width: 40%;
  max-width: 450px;
  height: 65px;
  margin-bottom: 10px;
  border-radius: 10px;
  font-size: 30px;
  border: 2px solid #4b89dc;
  text-align: right;
  padding-right: 20px;
  &:focus {
    outline: none;
  }
`;

const HistoryContainer = styled.div`
  width: 40%;
  max-width: 450px;
  margin-top: 20px;
  background-color: #f2f3f5;
  border-radius: 10px;
  padding: 10px;
  overflow-y: auto;
`;

const HistoryEntry = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 10px; // Í∞Å Ìï≠Î™© ÏÇ¨Ïù¥Ïùò Í∞ÑÍ≤©
`;

const HistoryItem = styled.div`
  padding: 5px;
  border-bottom: 1px solid #ddd;
`;

const HistoryButton = styled.button`
  background-color: #ff6b6b;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 5px 10px;
  margin-left: 10px;
  cursor: pointer;
  font-size: 0.8rem;
  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);

  &:hover {
    background-color: #ff8787;
  }

  &:active {
    background-color: #ff4747;
  }
`;

const MenuContainer = styled.div`
  display: flex;
  justify-content: space-around;
  align-items: center;
  width: 40%;
  max-width: 450px;
  margin-bottom: 20px;
`;

const Icon = styled.div`
  font-size: 2rem;
  cursor: pointer;
`;

export default Calculator;
